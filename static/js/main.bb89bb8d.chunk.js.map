{"version":3,"sources":["square.jsx","board.jsx","game.jsx","app.jsx","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","value","Board","renderSquare","index","squares","calculateWinner","lines","i","length","a","b","c","Game","state","history","Array","fill","stepNumber","xIsNext","handleClick","slice","setState","concat","jumpTo","step","this","current","winner","moves","map","_","move","desc","key","status","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uPAOeA,MALf,SAAgBC,GACZ,OACI,4BAAQC,UAAU,SAASC,QAASF,EAAME,SAAUF,EAAMG,QCyBnDC,MA1Bf,SAAeJ,GACX,IAAMK,EAAa,SAAAC,GAAK,OACpB,kBAAC,EAAD,CAAQH,MAAOH,EAAMO,QAAQD,GAAQJ,QAAS,kBAAIF,EAAME,QAAQI,OAGpE,OACI,6BACA,yBAAKL,UAAU,aACdI,EAAa,GACbA,EAAa,GACbA,EAAa,IAEd,yBAAKJ,UAAU,aACdI,EAAa,GACbA,EAAa,GACbA,EAAa,IAEd,yBAAKJ,UAAU,aACdI,EAAa,GACbA,EAAa,GACbA,EAAa,MCpBtB,SAASG,EAAgBD,GAWrB,IAVJ,IAAME,EAAM,CACR,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,IAEGC,EAAE,EAAEA,EAAED,EAAME,OAAOD,IAAI,CAAC,IAAD,cACbD,EAAMC,GADO,GACpBE,EADoB,KAClBC,EADkB,KAChBC,EADgB,KAE3B,GAAGP,EAAQK,IAAIL,EAAQK,IAAIL,EAAQM,IAAIN,EAAQK,IAAIL,EAAQO,GACvD,OAAOP,EAAQK,GAGvB,OAAO,K,IAuEIG,E,4MAlEXC,MAAM,CACFC,QAAQ,CAAC,CAACV,QAAQW,MAAM,GAAGC,KAAK,QAChCC,WAAW,EACXC,SAAQ,G,EAGZC,YAAY,SAAAhB,GACR,IAAMW,EAAQ,EAAKD,MAAMC,QAAQM,MAAM,EAAG,EAAKP,MAAMI,WAAY,GAE3Db,EADQU,EAAQA,EAAQN,OAAQ,GAChBJ,QAAQgB,QAE3Bf,EAAgBD,IAAUA,EAAQD,KAGrCC,EAAQD,GAAO,EAAKU,MAAMK,QAAS,IAAI,IACvC,EAAKG,SAAS,CACVP,QAAQA,EAAQQ,OAAO,CAAC,CAAClB,aACzBa,WAAWH,EAAQN,OACnBU,SAAS,EAAKL,MAAMK,Y,EAI5BK,OAAO,SAAAC,GACH,EAAKH,SAAS,CACVJ,WAAWO,EACXN,QAAQM,EAAK,GAAG,K,uDAIf,IAAD,OACEV,EAAQW,KAAKZ,MAAMC,QACnBY,EAAQZ,EAAQW,KAAKZ,MAAMI,YAC3BU,EAAQtB,EAAgBqB,EAAQtB,SAGhCwB,EAAMd,EAAQe,KAAI,SAACC,EAAEC,GACvB,IAAMC,EAAKD,EAAK,eAAgBA,EAAM,mBACtC,OACI,wBAAIE,IAAKF,GACT,4BAAQhC,QAAS,kBAAI,EAAKwB,OAAOQ,KAAQC,OAK9CE,EAAO,GAOV,OALGA,EADDP,EACQ,SAASA,EAEV,iBAAiBF,KAAKZ,MAAMK,QAAQ,IAAI,KAI7C,yBAAKpB,UAAU,QACf,yBAAKA,UAAU,cACf,kBAAC,EAAD,CAAOM,QAASsB,EAAQtB,QAASL,QAAS0B,KAAKN,eAE/C,yBAAKrB,UAAU,aACf,6BAAMoC,GACN,4BACCN,S,GA5DMO,IAAMC,WCVVC,EATL,WACN,OACK,yBAAKvC,UAAU,OACf,2CACA,kBAAC,EAAD,QCGWwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.bb89bb8d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Square(props){\r\n    return(\r\n        <button className='square' onClick={props.onClick}>{props.value}</button>\r\n    )\r\n}\r\nexport default Square;","import React from 'react'\r\nimport Square from './square'\r\n\r\nfunction Board(props){\r\n    const renderSquare=index=>(\r\n        <Square value={props.squares[index]} onClick={()=>props.onClick(index)}/>\r\n    );\r\n\r\n    return(\r\n        <div>\r\n        <div className='board-row'>\r\n        {renderSquare(0)}\r\n        {renderSquare(1)}\r\n        {renderSquare(2)}\r\n        </div>\r\n        <div className='board-row'>\r\n        {renderSquare(3)}\r\n        {renderSquare(4)}\r\n        {renderSquare(5)}\r\n        </div>\r\n        <div className='board-row'>\r\n        {renderSquare(6)}\r\n        {renderSquare(7)}\r\n        {renderSquare(8)}\r\n        </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\nimport Board from './board';\r\n\r\nfunction calculateWinner(squares){\r\nconst lines=[\r\n    [0,1,2],\r\n    [3,4,5],\r\n    [6,7,8],\r\n    [0,3,6],\r\n    [1,4,7],\r\n    [2,5,8],\r\n    [0,4,8],\r\n    [2,4,6]\r\n    ]\r\n    for(let i=0;i<lines.length;i++){\r\n        const [a,b,c]=lines[i]\r\n        if(squares[a]&&squares[a]==squares[b]&&squares[a]==squares[c]){\r\n            return squares[a]\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\n\r\nclass Game extends React.Component{\r\n    state={\r\n        history:[{squares:Array(9).fill(null)}],\r\n        stepNumber:0,\r\n        xIsNext:true\r\n    }\r\n\r\n    handleClick=index=>{\r\n        const history=this.state.history.slice(0, this.state.stepNumber +1);\r\n        const current=history[history.length -1];\r\n        const squares=current.squares.slice();\r\n\r\n        if(calculateWinner(squares)||squares[index]){\r\n        return;\r\n        }\r\n        squares[index]=this.state.xIsNext? 'X':'O';\r\n        this.setState({\r\n            history:history.concat([{squares}]),\r\n            stepNumber:history.length,\r\n            xIsNext:!this.state.xIsNext\r\n        });\r\n    };\r\n\r\n    jumpTo=step=>{\r\n        this.setState({\r\n            stepNumber:step,\r\n            xIsNext:step%2==0\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const history=this.state.history;\r\n        const current=history[this.state.stepNumber];\r\n        const winner =calculateWinner(current.squares)\r\n        \r\n\r\n        const moves=history.map((_,move)=>{\r\n            const desc=move?'Go to MOve #'+ move :'Go to Game Start'\r\n            return(\r\n                <li key={move}>\r\n                <button onClick={()=>this.jumpTo(move)}>{desc}</button>\r\n                </li>\r\n            )\r\n        })\r\n \r\n       let status=''\r\n       if(winner){\r\n           status='Winner'+winner\r\n       } else{\r\n          status='Next Players:'+(this.state.xIsNext?'X':'O');     \r\n       }\r\n\r\n        return(\r\n            <div className='game'>\r\n            <div className='game-board'>\r\n            <Board squares={current.squares} onClick={this.handleClick}/>\r\n            </div>\r\n            <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <ol>\r\n            {moves}\r\n            </ol>\r\n            </div>\r\n            </div>\r\n            ) ;\r\n    }\r\n}\r\nexport default Game;","import React from 'react'\r\nimport './App.css'\r\nimport Game from './game'\r\n\r\n\r\nconst App=()=>{\r\n    return(\r\n         <div className='app'>\r\n         <h1>Tic Tac Toe</h1>\r\n         <Game/>\r\n         </div>\r\n    )\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}